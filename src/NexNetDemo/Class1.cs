// <auto-generated/>
#nullable enable

using System.Runtime.CompilerServices;
using NexNet.Invocation;

namespace NexNetDemo;

/// <summary>
/// Hub used for handling all client communications.
/// </summary>
partial class ServerHub : global::NexNet.Invocation.ServerHubBase<global::NexNetDemo.ClientHubProxyImpl>, global::NexNetDemo.IServerHub
{
    /// <summary>
    /// Creates an instance of the server for this hub and matching client.
    /// </summary>
    /// <param name="config">Configurations for this instance.</param>
    /// <param name="hubFactory">Factory used to instance hubs for the server on each client connection. Useful to pass parameters to the hub.</param>
    /// <returns>NexNetServer for handling incoming connections.</returns>
    public static global::NexNet.NexNetServer<ServerHub, global::NexNetDemo.ClientHubProxyImpl> CreateServer(global::NexNet.Transports.ServerConfig config, Func<ServerHub> hubFactory)
    {
        return new global::NexNet.NexNetServer<ServerHub, global::NexNetDemo.ClientHubProxyImpl>(config, hubFactory);
    }

    protected override async global::System.Threading.Tasks.ValueTask InvokeMethodCore(global::NexNet.Messages.InvocationRequestMessage message, global::System.Buffers.IBufferWriter<byte>? returnBuffer)
    {
        global::System.Threading.CancellationTokenSource? cts = null;
        try
        {
            switch (message.MethodId)
            {
                case 0:
                    {
                        ServerVoid();
                        break;
                    }
                case 1:
                    {
                        var arguments = global::MemoryPack.MemoryPackSerializer.Deserialize<System.ValueTuple<global::System.Int32>>(message.Arguments.Span);
                        ServerVoidWithParam(arguments.Item1);
                        break;
                    }
                case 2:
                    {
                        await ServerTask();
                        break;
                    }
                case 3:
                    {
                        var arguments = global::MemoryPack.MemoryPackSerializer.Deserialize<System.ValueTuple<global::System.Int32>>(message.Arguments.Span);
                        await ServerTaskWithParam(arguments.Item1);
                        break;
                    }
                case 4:
                    {
                        var result = await ServerTaskValue();
                        if (returnBuffer != null)
                            global::MemoryPack.MemoryPackSerializer.Serialize(returnBuffer, result);
                        break;
                    }
                case 5:
                    {
                        var arguments = global::MemoryPack.MemoryPackSerializer.Deserialize<System.ValueTuple<global::System.Int32>>(message.Arguments.Span);
                        var result = await ServerTaskValueWithParam(arguments.Item1);
                        if (returnBuffer != null)
                            global::MemoryPack.MemoryPackSerializer.Serialize(returnBuffer, result);
                        break;
                    }
                case 6:
                {
                    var methodInvoker = Unsafe.As<IMethodInvoker<global::NexNetDemo.ClientHubProxyImpl>>(this);
                        cts = methodInvoker.RegisterCancellationToken(message.InvocationId);
                        await ServerTaskWithCancellation(cts.Token);
                        break;
                    }
                case 7:
                    {
                        cts = RegisterCancellationToken(message.InvocationId);
                        var arguments = global::MemoryPack.MemoryPackSerializer.Deserialize<System.ValueTuple<global::System.Int32>>(message.Arguments.Span);
                        await ServerTaskWithValueAndCancellation(arguments.Item1, cts.Token);
                        break;
                    }
                case 8:
                    {
                        cts = RegisterCancellationToken(message.InvocationId);
                        var result = await ServerTaskValueWithCancellation(cts.Token);
                        if (returnBuffer != null)
                            global::MemoryPack.MemoryPackSerializer.Serialize(returnBuffer, result);
                        break;
                    }
                case 9:
                    {
                        var methodInvoker = Unsafe.As<IMethodInvoker<global::NexNetDemo.ClientHubProxyImpl>>(this);
                        cts = methodInvoker.RegisterCancellationToken(message.InvocationId);
                        var arguments = global::MemoryPack.MemoryPackSerializer.Deserialize<System.ValueTuple<global::System.Int32>>(message.Arguments.Span);
                        var result = await ServerTaskValueWithValueAndCancellation(arguments.Item1, cts.Token);
                        if (returnBuffer != null)
                            global::MemoryPack.MemoryPackSerializer.Serialize(returnBuffer, result);
                        break;
                    }
            }
        }
        finally
        {
            if (cts != null)
            {
                var methodInvoker = Unsafe.As<IMethodInvoker<global::NexNetDemo.ClientHubProxyImpl>>(this);
                methodInvoker.ReturnCancellationToken(message.InvocationId);
            }
        }

    }
}

public class ClientHubProxyImpl : global::NexNet.Invocation.ProxyInvocationBase, global::NexNetDemo.IClientHub
{
    public void Update()
    {
        InvokeMethod(0, null);
    }

    public global::System.Threading.Tasks.ValueTask<global::System.Int32> GetTask()
    {
        return InvokeWaitForResult<global::System.Int32>(1, null, null);
    }

    public global::System.Threading.Tasks.ValueTask<global::System.Int32> GetTaskAgain()
    {
        return InvokeWaitForResult<global::System.Int32>(2, null, null);
    }

}

/// <summary>
/// Hub used for handling all server communications.
/// </summary>
partial class ClientHub : global::NexNet.Invocation.ClientHubBase<global::NexNetDemo.ServerHubProxyImpl>, global::NexNetDemo.IClientHub
{
    /// <summary>
    /// Creates an instance of the client for this hub and matching server.
    /// </summary>
    /// <param name="config">Configurations for this instance.</param>
    /// <param name="hub">Hub used for this client while communicating with the server. Useful to pass parameters to the hub.</param>
    /// <returns>NexNetClient for connecting to the matched NexNetServer.</returns>
    public static global::NexNet.NexNetClient<ClientHub, global::NexNetDemo.ServerHubProxyImpl> CreateClient(global::NexNet.Transports.ClientConfig config, ClientHub hub)
    {
        return new global::NexNet.NexNetClient<ClientHub, global::NexNetDemo.ServerHubProxyImpl>(config, hub);
    }

    protected override async global::System.Threading.Tasks.ValueTask InvokeMethodCore(global::NexNet.Messages.InvocationRequestMessage message, global::System.Buffers.IBufferWriter<byte>? returnBuffer)
    {
        global::System.Threading.CancellationTokenSource? cts = null;
        try
        {
            switch (message.MethodId)
            {
                case 0:
                    {
                        Update();
                        break;
                    }
                case 1:
                    {
                        var result = await GetTask();
                        if (returnBuffer != null)
                            global::MemoryPack.MemoryPackSerializer.Serialize(returnBuffer, result);
                        break;
                    }
                case 2:
                    {
                        var result = await GetTaskAgain();
                        if (returnBuffer != null)
                            global::MemoryPack.MemoryPackSerializer.Serialize(returnBuffer, result);
                        break;
                    }
            }
        }
        finally
        {
            if (cts != null)
                ReturnCancellationToken(message.InvocationId);
        }

    }
}

public class ServerHubProxyImpl : global::NexNet.Invocation.ProxyInvocationBase, global::NexNetDemo.IServerHub
{
    public void ServerVoid()
    {
        InvokeMethod(0, null);
    }

    public void ServerVoidWithParam(global::System.Int32 id)
    {
        var arguments = global::MemoryPack.MemoryPackSerializer.Serialize<global::System.ValueTuple<global::System.Int32>>(new(id));
        InvokeMethod(1, arguments);
    }

    public global::System.Threading.Tasks.ValueTask ServerTask()
    {
        return InvokeWaitForResult(2, null, null);
    }

    public global::System.Threading.Tasks.ValueTask ServerTaskWithParam(global::System.Int32 data)
    {
        var arguments = global::MemoryPack.MemoryPackSerializer.Serialize<global::System.ValueTuple<global::System.Int32>>(new(data));
        return InvokeWaitForResult(3, arguments, null);
    }

    public global::System.Threading.Tasks.ValueTask<global::System.Int32> ServerTaskValue()
    {
        return InvokeWaitForResult<global::System.Int32>(4, null, null);
    }

    public global::System.Threading.Tasks.ValueTask<global::System.Int32> ServerTaskValueWithParam(global::System.Int32 data)
    {
        var arguments = global::MemoryPack.MemoryPackSerializer.Serialize<global::System.ValueTuple<global::System.Int32>>(new(data));
        return InvokeWaitForResult<global::System.Int32>(5, arguments, null);
    }

    public global::System.Threading.Tasks.ValueTask ServerTaskWithCancellation(global::System.Threading.CancellationToken cancellationToken)
    {
        return InvokeWaitForResult(6, null, cancellationToken);
    }

    public global::System.Threading.Tasks.ValueTask ServerTaskWithValueAndCancellation(global::System.Int32 value, global::System.Threading.CancellationToken cancellationToken)
    {
        var arguments = global::MemoryPack.MemoryPackSerializer.Serialize<global::System.ValueTuple<global::System.Int32>>(new(value));
        return InvokeWaitForResult(7, arguments, cancellationToken);
    }

    public global::System.Threading.Tasks.ValueTask<global::System.Int32> ServerTaskValueWithCancellation(global::System.Threading.CancellationToken cancellationToken)
    {
        return InvokeWaitForResult<global::System.Int32>(8, null, cancellationToken);
    }

    public global::System.Threading.Tasks.ValueTask<global::System.Int32> ServerTaskValueWithValueAndCancellation(global::System.Int32 value, global::System.Threading.CancellationToken cancellationToken)
    {
        var arguments = global::MemoryPack.MemoryPackSerializer.Serialize<global::System.ValueTuple<global::System.Int32>>(new(value));
        return InvokeWaitForResult<global::System.Int32>(9, arguments, cancellationToken);
    }

}

partial interface IClientHub : global::NexNet.Invocation.IInterfaceMethodHash
{
    static int global::NexNet.Invocation.IInterfaceMethodHash.MethodHash { get => -1170943965; }
}

partial interface IServerHub : global::NexNet.Invocation.IInterfaceMethodHash
{
    static int global::NexNet.Invocation.IInterfaceMethodHash.MethodHash { get => -359808297; }
}

