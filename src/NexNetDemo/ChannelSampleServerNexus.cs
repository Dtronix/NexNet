// <auto-generated/>
#nullable enable

using NexNet.Pipes;

namespace NexNetDemo.Samples.Channel
{
    /// <summary>
    /// Nexus used for handling all Server communications.
    /// </summary>
    partial class ChannelSampleServerNexus : global::NexNet.Invocation.ServerNexusBase<global::NexNetDemo.Samples.Channel.ChannelSampleServerNexus.ClientProxy>, global::NexNetDemo.Samples.Channel.IChannelSampleServerNexus, global::NexNet.Invocation.IInvocationMethodHash
    {
        /// <summary>
        /// Creates an instance of the server for this nexus and matching client.
        /// </summary>
        /// <param name="config">Configurations for this instance.</param>
        /// <param name="nexusFactory">Factory used to instance nexuses for the server on each client connection. Useful to pass parameters to the nexus.</param>
        /// <returns>NexusServer for handling incoming connections.</returns>
        public static global::NexNet.NexusServer<global::NexNetDemo.Samples.Channel.ChannelSampleServerNexus, global::NexNetDemo.Samples.Channel.ChannelSampleServerNexus.ClientProxy> CreateServer(global::NexNet.Transports.ServerConfig config, global::System.Func<global::NexNetDemo.Samples.Channel.ChannelSampleServerNexus> nexusFactory)
        {
            return new global::NexNet.NexusServer<global::NexNetDemo.Samples.Channel.ChannelSampleServerNexus, global::NexNetDemo.Samples.Channel.ChannelSampleServerNexus.ClientProxy>(config, nexusFactory);
        }

        protected override async global::System.Threading.Tasks.ValueTask InvokeMethodCore(global::NexNet.Messages.IInvocationMessage message, global::System.Buffers.IBufferWriter<byte>? returnBuffer)
        {
            global::System.Threading.CancellationTokenSource? cts = null;
            global::NexNet.Pipes.INexusDuplexPipe? duplexPipe = null;
            var methodInvoker = global::System.Runtime.CompilerServices.Unsafe.As<global::NexNet.Invocation.IMethodInvoker>(this);
            try
            {
                switch (message.MethodId)
                {
                    case 0:
                        {
                            // ValueTask IntegerChannel(INexusDuplexUnmanagedChannel<int> channel)
                            var arguments = message.DeserializeArguments<global::System.ValueTuple<global::System.Byte>>();
                            duplexPipe = await methodInvoker.RegisterDuplexPipe(arguments.Item1);
                            this.Context.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, this.Context.Logger.Category, null, $"Invoking Method: IntegerChannel(channel = {arguments.Item1});");
                            await IntegerChannel(global::NexNet.Pipes.NexusDuplexPipeExtensions.GetUnmanagedChannel<global::System.Int32>(duplexPipe));
                            break;
                        }
                    case 1:
                        {
                            // ValueTask StructChannel(INexusDuplexUnmanagedChannel<ChannelSampleStruct> channel)
                            var arguments = message.DeserializeArguments<global::System.ValueTuple<global::System.Byte>>();
                            duplexPipe = await methodInvoker.RegisterDuplexPipe(arguments.Item1);
                            this.Context.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, this.Context.Logger.Category, null, $"Invoking Method: StructChannel(channel = {arguments.Item1});");
                            await StructChannel(global::NexNet.Pipes.NexusDuplexPipeExtensions.GetUnmanagedChannel<global::NexNetDemo.Samples.Channel.ChannelSampleStruct>(duplexPipe));
                            break;
                        }
                    case 2:
                        {
                            // ValueTask ClassChannel(INexusDuplexChannel<ComplexMessage> channel)
                            var arguments = message.DeserializeArguments<global::System.ValueTuple<global::System.Byte>>();
                            duplexPipe = await methodInvoker.RegisterDuplexPipe(arguments.Item1);
                            this.Context.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, this.Context.Logger.Category, null, $"Invoking Method: ClassChannel(channel = {arguments.Item1});");
                            await ClassChannel(global::NexNet.Pipes.NexusDuplexPipeExtensions.GetChannel<global::NexNetDemo.Samples.Channel.ComplexMessage>(duplexPipe));
                            break;
                        }
                    case 3:
                        {
                            // ValueTask ClassChannelBatch(INexusDuplexChannel<ComplexMessage> channel)
                            var arguments = message.DeserializeArguments<global::System.ValueTuple<global::System.Byte>>();
                            duplexPipe = await methodInvoker.RegisterDuplexPipe(arguments.Item1);
                            this.Context.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, this.Context.Logger.Category, null, $"Invoking Method: ClassChannelBatch(channel = {arguments.Item1});");
                            await ClassChannelBatch(global::NexNet.Pipes.NexusDuplexPipeExtensions.GetChannel<global::NexNetDemo.Samples.Channel.ComplexMessage>(duplexPipe));
                            break;
                        }
                    case 4:
                        {
                            // ValueTask DifferentTypesChannel(INexusDuplexPipe pipe)
                            var arguments = message.DeserializeArguments<global::System.ValueTuple<global::System.Byte>>();
                            duplexPipe = await methodInvoker.RegisterDuplexPipe(arguments.Item1);
                            this.Context.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, this.Context.Logger.Category, null, $"Invoking Method: DifferentTypesChannel(pipe = {arguments.Item1});");
                            await DifferentTypesChannel(duplexPipe);
                            break;
                        }
                    case 5:
                    {
                        // ValueTask ClassChannel(INexusDuplexChannel<ComplexMessage> channel)
                        var arguments = message.DeserializeArguments<global::System.ValueTuple<global::System.Byte>>();
                        duplexPipe = await methodInvoker.RegisterDuplexPipe(arguments.Item1);
                        this.Context.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, this.Context.Logger.Category, null, $"Invoking Method: ClassChannel(channel = {arguments.Item1});");
                        await ClassChannel(global::NexNet.Pipes.NexusDuplexPipeExtensions.GetChannel<global::NexNetDemo.Samples.Channel.ComplexMessage>(duplexPipe));
                        break;
                    }
                }
            }
            finally
            {
                if (cts != null)
                {
                    methodInvoker.ReturnCancellationToken(message.InvocationId);
                }

                if (duplexPipe != null)
                {
                    await methodInvoker.ReturnDuplexPipe(duplexPipe);
                }
            }

        }

        /// <summary>
        /// Hash for this the methods on this proxy or nexus.  Used to perform a simple client and server match check.
        /// </summary>
        static int global::NexNet.Invocation.IInvocationMethodHash.MethodHash { get => 1427441878; }

        /// <summary>
        /// Proxy invocation implementation for the matching nexus.
        /// </summary>
        public class ClientProxy : global::NexNet.Invocation.ProxyInvocationBase, global::NexNetDemo.Samples.Channel.IChannelSampleClientNexus, global::NexNet.Invocation.IInvocationMethodHash
        {

            /// <summary>
            /// Hash for this the methods on this proxy or nexus.  Used to perform a simple client and server match check.
            /// </summary>
            static int global::NexNet.Invocation.IInvocationMethodHash.MethodHash { get => 0; }
        }
    }
}


namespace NexNetDemo.Samples.Channel
{
    /// <summary>
    /// Nexus used for handling all Client communications.
    /// </summary>
    partial class ChannelSampleClientNexus : global::NexNet.Invocation.ClientNexusBase<global::NexNetDemo.Samples.Channel.ChannelSampleClientNexus.ServerProxy>, global::NexNetDemo.Samples.Channel.IChannelSampleClientNexus, global::NexNet.Invocation.IInvocationMethodHash
    {
        /// <summary>
        /// Creates an instance of the client for this nexus and matching server.
        /// </summary>
        /// <param name="config">Configurations for this instance.</param>
        /// <param name="nexus">Nexus used for this client while communicating with the server. Useful to pass parameters to the nexus.</param>
        /// <returns>NexusClient for connecting to the matched NexusServer.</returns>
        public static global::NexNet.NexusClient<global::NexNetDemo.Samples.Channel.ChannelSampleClientNexus, global::NexNetDemo.Samples.Channel.ChannelSampleClientNexus.ServerProxy> CreateClient(global::NexNet.Transports.ClientConfig config, ChannelSampleClientNexus nexus)
        {
            return new global::NexNet.NexusClient<global::NexNetDemo.Samples.Channel.ChannelSampleClientNexus, global::NexNetDemo.Samples.Channel.ChannelSampleClientNexus.ServerProxy>(config, nexus);
        }

        protected override async global::System.Threading.Tasks.ValueTask InvokeMethodCore(global::NexNet.Messages.IInvocationMessage message, global::System.Buffers.IBufferWriter<byte>? returnBuffer)
        {
            global::System.Threading.CancellationTokenSource? cts = null;
            global::NexNet.Pipes.INexusDuplexPipe? duplexPipe = null;
            var methodInvoker = global::System.Runtime.CompilerServices.Unsafe.As<global::NexNet.Invocation.IMethodInvoker>(this);
            try
            {
                // No methods.
            }
            finally
            {
                if (cts != null)
                {
                    methodInvoker.ReturnCancellationToken(message.InvocationId);
                }

                if (duplexPipe != null)
                {
                    await methodInvoker.ReturnDuplexPipe(duplexPipe);
                }
            }

        }

        /// <summary>
        /// Hash for this the methods on this proxy or nexus.  Used to perform a simple client and server match check.
        /// </summary>
        static int global::NexNet.Invocation.IInvocationMethodHash.MethodHash { get => 0; }

        /// <summary>
        /// Proxy invocation implementation for the matching nexus.
        /// </summary>
        public class ServerProxy : global::NexNet.Invocation.ProxyInvocationBase, global::NexNetDemo.Samples.Channel.IChannelSampleServerNexus, global::NexNet.Invocation.IInvocationMethodHash
        {
            public global::System.Threading.Tasks.ValueTask IntegerChannel(global::NexNet.Pipes.INexusDuplexUnmanagedChannel<global::System.Int32> channel)
            {
                var __proxyInvoker = global::System.Runtime.CompilerServices.Unsafe.As<global::NexNet.Invocation.IProxyInvoker>(this);
                var __proxyInvocationArguments = new global::System.ValueTuple<global::System.Byte>(__proxyInvoker.ProxyGetDuplexPipeInitialId(channel.BasePipe));
                __proxyInvoker.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, __proxyInvoker.Logger.Category, null, $"Proxy Invoking Method: IntegerChannel(channel = {__proxyInvocationArguments.Item1});");
                return __proxyInvoker.ProxyInvokeMethodCore(0, __proxyInvocationArguments, global::NexNet.Messages.InvocationFlags.DuplexPipe);
            }
            public global::System.Threading.Tasks.ValueTask StructChannel(global::NexNet.Pipes.INexusDuplexUnmanagedChannel<global::NexNetDemo.Samples.Channel.ChannelSampleStruct> channel)
            {
                var __proxyInvoker = global::System.Runtime.CompilerServices.Unsafe.As<global::NexNet.Invocation.IProxyInvoker>(this);
                var __proxyInvocationArguments = new global::System.ValueTuple<global::System.Byte>(__proxyInvoker.ProxyGetDuplexPipeInitialId(channel.BasePipe));
                __proxyInvoker.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, __proxyInvoker.Logger.Category, null, $"Proxy Invoking Method: StructChannel(channel = {__proxyInvocationArguments.Item1});");
                return __proxyInvoker.ProxyInvokeMethodCore(1, __proxyInvocationArguments, global::NexNet.Messages.InvocationFlags.DuplexPipe);
            }
            public global::System.Threading.Tasks.ValueTask ClassChannel(global::NexNet.Pipes.INexusDuplexChannel<global::NexNetDemo.Samples.Channel.ComplexMessage> channel)
            {
                var __proxyInvoker = global::System.Runtime.CompilerServices.Unsafe.As<global::NexNet.Invocation.IProxyInvoker>(this);
                var __proxyInvocationArguments = new global::System.ValueTuple<global::System.Byte>(__proxyInvoker.ProxyGetDuplexPipeInitialId(channel.BasePipe));
                __proxyInvoker.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, __proxyInvoker.Logger.Category, null, $"Proxy Invoking Method: ClassChannel(channel = {__proxyInvocationArguments.Item1});");
                return __proxyInvoker.ProxyInvokeMethodCore(2, __proxyInvocationArguments, global::NexNet.Messages.InvocationFlags.DuplexPipe);
            }
            public global::System.Threading.Tasks.ValueTask ClassChannelBatch(global::NexNet.Pipes.INexusDuplexChannel<global::NexNetDemo.Samples.Channel.ComplexMessage> channel)
            {
                var __proxyInvoker = global::System.Runtime.CompilerServices.Unsafe.As<global::NexNet.Invocation.IProxyInvoker>(this);
                var __proxyInvocationArguments = new global::System.ValueTuple<global::System.Byte>(__proxyInvoker.ProxyGetDuplexPipeInitialId(channel.BasePipe));
                __proxyInvoker.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, __proxyInvoker.Logger.Category, null, $"Proxy Invoking Method: ClassChannelBatch(channel = {__proxyInvocationArguments.Item1});");
                return __proxyInvoker.ProxyInvokeMethodCore(3, __proxyInvocationArguments, global::NexNet.Messages.InvocationFlags.DuplexPipe);
            }
            public global::System.Threading.Tasks.ValueTask DifferentTypesChannel(global::NexNet.Pipes.INexusDuplexPipe pipe)
            {
                var __proxyInvoker = global::System.Runtime.CompilerServices.Unsafe.As<global::NexNet.Invocation.IProxyInvoker>(this);
                var __proxyInvocationArguments = new global::System.ValueTuple<global::System.Byte>(__proxyInvoker.ProxyGetDuplexPipeInitialId(pipe));
                __proxyInvoker.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, __proxyInvoker.Logger.Category, null, $"Proxy Invoking Method: DifferentTypesChannel(pipe = {__proxyInvocationArguments.Item1});");
                return __proxyInvoker.ProxyInvokeMethodCore(4, __proxyInvocationArguments, global::NexNet.Messages.InvocationFlags.DuplexPipe);
            }

            public async global::System.Threading.Tasks.ValueTask Send(NexusEnumerableChannel<global::NexNetDemo.Samples.Channel.ComplexMessage> enumerable)
            {
                var __proxyInvoker = global::System.Runtime.CompilerServices.Unsafe.As<global::NexNet.Invocation.IProxyInvoker>(this);
                
                var __duplexPipe = __proxyInvoker.GetDuplexPipe();

                if (__duplexPipe == null)
                    throw new InvalidOperationException("Could not create duplex pipe.  Session must be connected.");

                var __proxyInvocationArguments = new global::System.ValueTuple<global::System.Byte>(__proxyInvoker.ProxyGetDuplexPipeInitialId(__duplexPipe));
                __proxyInvoker.Logger?.Log(global::NexNet.Logging.NexusLogLevel.Information, __proxyInvoker.Logger.Category, null, $"Proxy Invoking Method: Send(channel = {__proxyInvocationArguments.Item1});");
                await __proxyInvoker.ProxyInvokeMethodCore(5, __proxyInvocationArguments, global::NexNet.Messages.InvocationFlags.DuplexPipe);

                await __proxyInvoker.WriteNexusEnumerableChannel<global::NexNetDemo.Samples.Channel.ComplexMessage>(__duplexPipe, enumerable);

                await __argumentStream(enumerable);

                __duplexPipe.CompleteAsync();
            }

            /// <summary>
            /// Hash for this the methods on this proxy or nexus.  Used to perform a simple client and server match check.
            /// </summary>
            static int global::NexNet.Invocation.IInvocationMethodHash.MethodHash { get => 1427441878; }
        }
    }
}
